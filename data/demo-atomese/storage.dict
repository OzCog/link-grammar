%
% Example configuration file for an Atomspace-based dictionary.
%
% Three examples follow; one shows the use of the CogStorageNode, which
% provides network access, and another using RocksStorageNode, which
% provides access to dictionaries located on the local hard drive.
% The last uses the FileStorageNode, which is actually used for the
% demo.

% But first, begin with boilerplate: The dictionary is for English,
% the English locale should be used, and a version number.

#define dictionary-lang           en;
#define dictionary-locale         en_US.UTF-8;
#define dictionary-version-number 5.11.0;

% -----------------------
% CogStorageNode
%
% This will access an AtomSpace over the network, via a CogServer. The
% CogServer must be running, and must be loaded with language data.
%
% The default port for CogServers is 17001
% Here `localhost` is just 127.0.0.1
% Replace `localhost` by `example.com` or a dotted IPv4 address.
% The `r-thru` argument indicates that the read-thru proxy should be used:
% the cogserver will pass read requests onwards to any storage nodes
% that are open in the cogserver.
% #define storage-node "(CogStorageNode \"cog://localhost:17001?r-thru\")";

% -----------------------
% RocksStorageNode
%
% This will access an AtomSpace on a local hard drive, stored in a
% RocksDB database. The database must hold appropriate language data.
%
% The URL is just a path into the local filesystem.
%
% Uncomment this, and provide a correct file-path.
% #define storage-node "(RocksStorageNode \"rocks:///home2/linas/x13-all-in-one.rdb\")";

% -----------------------
% FileStorageNode
%
% This will access a file containing an AtomSpace encoded with
% s-expressions. The file must hold appropriate language data.
%
% The URL is just a path into the local filesystem.
%
% This is the one actually used in the demo. If you are getting errors,
% then verify that the path below is correct.

#define storage-node "(FileStorageNode \"file:///usr/local/share/link-grammar/demo-atomese/atomese-dict.scm\")";

% -----------------------
% Additional configuration parameters.

% Location where costs are stored. The cost will be obtained from
% the floating point value located at the `cost-key` Value on the
% Sections. It's assumed that this is a FloatValue, which is a vector;
% the index specifies the location in this vector.
#define cost-key "(Predicate \"*-Mutual Info Key cover-section\")";
#define cost-index 1;

% In the demo dictionary, the costs are provided by the MI, which is
% "better", the more positive it is.  The LG costs, however, are
% "better" when they are smaller (more negative). Thus, the value
% obtained above can be rescaled linearly befor being used as a cost.
% The rescaling is as usual: y=mx+b where m==`cost-scale` and
% b==`cost-offset`.
#define cost-scale -0.5;
#define cost-offset 0.0;

% Sections whose computed cost is greater than this will not be added
% to the local dictionary.
#define cost-cutoff 8.0;

% Sections with a missing cost will be assigned this default. To ignore
% sections with a missing cost, set it to some value greater than
% `cost-max`.
#define cost-default 2.0;

% Same as above, but for word-pairs. Note the different key!
#define pair-key "(Predicate \"*-Mutual Info Key-*\")";
#define pair-index 1;
#define pair-scale -0.5;
#define pair-offset 0.0;
#define pair-cutoff 8.0;
#define pair-default 2.0;

% -----------------------
% For this file to be read, at least one bogus entry is needed. It is
% meaningless; we only need to trick the code into reading this file.
% This file is read as an affix file, so only affix names are allowed.
foo: UNITS+;
