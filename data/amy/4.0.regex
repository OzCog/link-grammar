 %***************************************************************************%
 %                                                                           %
 %  Copyright (C) 2013 Linas Vepstas                                         %
 %  See file "LICENSE" for information about commercial use of this system   %
 %                                                                           %
 %***************************************************************************%

% The regexes here use the PCRE2 pattern syntax.
% The LG library must be configured with PCRE2 in order to use them.

% \X matches any Unicode grapheme.
% Since most of the script-specific punctuation characters are not in
% the affix-punc file, they are allowed here to join to the end word/parts
%
% For information on graphemes see: http://www.unicode.org/reports/tr29/

% Hyphenated words, contractions, and words with underbars in them, get split,
% along with many other punctuation characters that get strip from start
% and end of words. See the "any/affix-punc" file. These punctuation
% characters will match here.
ANY-PUNCT: /^[[:punct:]]+$/

% Multi-part random morphology: match any string as prefix, stem, or suffix.
% \x03 matches the internal representation of the dot in STEMSUBSCR
% (See 4.0.affix).

MOR-STEM: /^\X+\x03=$/
MOR-PREF: /^\X+=$/
MOR-SUFF: /^=\X+/

% Reject anything that contains punctuation, so that the tokenizer will
% have a chance to split them off as affixes.
% Most of the script-dependent punctuation characters are not mentioned in
% the "any/affix-punc" file and thus may be included in words.
ANY-WORD: /^[^[:punct:]]+$/

% For ASCII input and non-PCRE2 regex libraries you can use these instead:
% ANY-WORD: /^[[:alnum:]]+$/
% ANY-PUNCT: /^[[:punct:]]+$/
% MOR-PREF: /^[[:alnum:]]+=$/
% MOR-STEM: /^[[:alnum:]]+.=$/
% MOR-SUFF: /^=[[:alnum:]]+$/

% Match anything that doesn't match the above.
% Match anything that isn't white-space.
% Well ... actually, reject anything that contains
% punctuation. We do this, so that the tokenizer can split off the
% the affixes (trailing commas, etc) correctly.
JUNK: !/[[:punct:]]/
JUNK: /^/

% How to debug:
% link-parser amy -m -v=10 -debug=anysplit.c
% If needed, you can add to -debug (comma separated) one of more
% from the following: separate_word,regex-morph.c,read-regex.c
